# Auto 4
# Copyright (c) 2013, Auto Project
# Distributed under the terms of the FreeBSD license (LICENSE.md).

require 'colored'
require 'highline'
require 'yaml'

# namespace Auto
module Auto

  # A library for configuration generation. It depends upon the highline gem.
  #
  # @version 1.00
  # @author swarley
  # @author noxgirl
  #
  # @!attribute hl
  #   @return [HighLine] HighLine instance.
  #
  # @!attribute conf
  #   @return [Hash{}] The configuration hash.
  class Configure

    VERSION = '1.00'.freeze

    attr_accessor :hl, :conf

    # Produce a new instance of Auto::Configure.
    def initialize
      
      # Produce a new instance of HighLine.
      @hl   = HighLine.new
      # Prepare for configuration.
      @conf = Hash.new

    end

    # Yield a depth-formatted question.
    #
    # @param [Integer] depth Degree of identation.
    # @param [String] message The message.
    #
    # @return [String] Newly formatted message.
    def yield_q(depth, message)
      indent = '>'
      depth.times { indent.concat '>>' }
      "#{indent} #{message}"
    end

    # Yield a depth-formatted field.
    #
    # @param [Integer] depth Degree of indentation.
    #
    # @return [String] Newly formatted field.
    def yield_f(depth)
      indent = '>'
      depth.times { indent.concat '>>' }
      "#{depth}: "
    end

    # Initiate configuration.
    def start
      
      greeting = <<-EOM
Greetings! ^.^

I am going to assist you in configuring your installation of Auto. :) I suggest
that, if you're not already reading it, you consult the installation guide:
https://github.com/Auto/Auto/wiki/Install-Guide

When specifying lists, pressing <Enter> or <Return> will end that element and
go to the next one. If the key is pressed while not providing data, that list
will be terminated.

Remember, if you need additional help, you're free to use the mailing list at
https://groups.google.com/group/autobot-talk, or to join the official IRC
channel at #auto on irc.freenode.net. :)

Let us begin!
      EOM
      puts greeting.yellow.bold

      conf_libraries

      dump

    end

    # Configure libraries.
    def conf_libraries
     


    # Dump configuration.
    def dump

      # A sanity check.
      if @conf.empty?
        puts "Configuration is inexplicably empty: aborting.".red.bold
        exit 1
      end

      # Produce file.
      data = <<-EOD
# Configuration file generated by auto-conf
# version #{Auto::Configure::VERSION}
# at #{Time.now}

#{YAML.dump(@conf)}
      EOD
      
      # Produce message.
      final = <<-EOM
OK! Your configuration file is ready! :D

I just need to know one last thing: where to write this fabulous configuration.

By default, I will write this to <YOUR_HOME_DIRECTORY>/.config/autobot/auto.yml,
which is perfect for you if you're using the 'autobot' gem, because this is the
standard file for which the gem will look when executed.

However, if you are running a standalone installation, you probably want to
write this to your conf/ directory as auto.yml (if you're running #$0 from the
main directory, "conf/auto.yml"), as the standalone Auto will look for that
when it is executed.

In any event, you are free to write this anywhere you please. Just remember
that if it is not a default path, you must specify it when running Auto:

$ auto --config=path/to/config/file.yml

Caution: The specified file will be overwritten if it already exists.
      EOM
      puts final.green.bold

      # Save our directories of interest into easily accessible variables.
      configdir = File.join(Dir.home, '.config')
      autodir   = File.join(Dir.home, '.config', 'autobot')

      # Ensure that said directories exist regardless of any other conditions.
      unless Dir.exists? configdir
        puts "~ Creating missing directory #{configdir}".magenta
        Dir.mkdir configdir
      end
      unless Dir.exists? autodir
        puts "~ Creating missing directory #{autodir}".magenta
        Dir.mkdir autodir
      end

      # Ask for a path.
      path = ask(yield_q(0, "To where should the configuration be written? [<%= color('#{File.join(autodir, 'auto.yml')}', BOLD) %>] "), Pathname) do |q|
        
        # Default is ~/.config/autobot/auto.yml
        q.default  = File.join(autodir, 'auto.yml')

        # A proc to validate the path
        q.validate = proc do |path|
          return false unless path =~ /\.yml$/ # it should end in .yml
          return false unless Dir.exists? File.dirname(path) # the directory should exist
          # We should be able to write to the file:
          begin
            File.open(path, 'w') { |io| io.puts "# Configuration file generated by auto-conf" }
          rescue => e
            return false
          end
          true
        end

        # A proc to be called in the event of an invalid path
        q.responses[:not_valid] = proc do
          # Choose an emergency file in ~/.config/autobot/ to which to save.
          emerg_file = File.join(autodir, "auto.yml.#{Time.now.strftime('%s')}")
          puts "Invalid path! Attempting to write to #{emerg_file}.....".red
          File.open(path, 'w') do |io| 
            io.write data
          end

        end

      end # ask()

      File.open(path, 'w') { |io| io.write data } # Dump the data into the file.

      # We're done.
      puts "I have successfully written your configuration file to #{path}. Thank you for using Auto.".green.bold

    end

  end # class Configure

end # module Auto

# vim: set ts=4 sts=2 sw=2 et:
