#!/usr/bin/env ruby
# Copyright (c) 2013, Autumn Perrault, et al. All rights reserved.
# This free software is distributed under the FreeBSD license (see LICENSE).

require 'English'
require 'rbconfig'

# Perform a check of the Ruby version.
if ::RbConfig::CONFIG['ruby_version'] < '2.0.0'
  puts 'Auto requires Ruby v2.0.0 or later. Please read the Auto Handbook.'
  exit 1
end

# Forbid root.
if ENV.include? 'USER'
  if ENV['USER'] == 'root'
    puts 'It is forbidden to run Auto as the root user!'
    exit 1
  end
end

# Import necessary libraries.
require 'slop'
begin
  require 'auto'
rescue LoadError
  $LOAD_PATH.unshift File.expand_path(File.join('..', '..', 'lib'), __FILE__)
  require 'auto'
end
require 'auto/verbosity'

# Change to the Auto directory.
AUTO_DIR = File.join ENV['HOME'], '.auto'
Dir.mkdir AUTO_DIR unless Dir.exists? AUTO_DIR
Dir.chdir AUTO_DIR

$VERBOSITY = 0

# Parse options.
opts = Slop.parse(:banner => "Usage: #$PROGRAM_NAME [options]") do
  on :h, :help, 'Display this help message.' do
    puts self
    exit 0
  end

  on :v, :version, 'Display version and exit.' do
    puts <<-EOV
Auto #{Auto::FULLVERSION} [#{::RbConfig::CONFIG['host_os']}], by the Auto Project

http://autoproj.org
    EOV
    exit 0
  end

  on(:f, :foreground, 'Disable automatic daemonizing.')
  on(:c, :conf=,      'Specify a particular configuration file.')
  on(:V, :verbose,    'Increase verbosity of output (more uses, the more verbose).') { $VERBOSITY += 1 }
end

# Begin start up.
puts "* Auto #{Auto::VERSION} starting...".bold
$log = Auto::Logger.new

# Create an instance of Auto.
begin
  $m = Auto::Bot.new opts
  status = $m.init
rescue => e
  $log.fatal "An initialization error occurred: #{e}"
end

# Check our status.
if status
  time = Time.now
  $log.info "Auto started at #{time}."
else
  $log.fatal "Initialization inexplicably failed."
end
STARTTIME = time.freeze

# We survived? We survived! Fork into the background if not in debug or foreground.
$m.daemonize if !opts.foreground? && $VERBOSITY < 1

# Signals
sig = {
  'TERM' => proc { $m.terminate('Caught termination signal') },
  'INT'  => proc { $m.terminate('Ctrl-C pressed') },
  'HUP'  => proc { $m.conf.rehash }
}
sig.delete 'HUP' if Auto.windows?
sig.each { |signal, prc| Signal.trap(signal) { prc.call } }

begin
  $m.start
rescue => e
  $log.error_bt "Fatal exception: #{e}", e.backtrace
  exit 1
end

# vim: set ts=4 sts=2 sw=2 et:
