#!/usr/bin/env ruby
# Copyright (c) 2013, Autumn Perrault, et al. All rights reserved.
# This free software is distributed under the FreeBSD license (see LICENSE).

require 'English'
require 'rbconfig'

# Forbid root.
if ENV.include? 'USER'
  if ENV['USER'] == 'root'
    puts 'It is forbidden to run Syndi as the root user!'
    exit 1
  end
end

# Import necessary libraries.
if File.exists? 'Gemfile.lock'
  require 'bundler'
  Bundler.setup :default
end
require 'slop'
require 'syndi'
require 'syndi/verbosity'

# Change to the Syndi directory.
Syndi.dir = File.join (Syndi.windows? ? ENV['APPDATA'] : ENV['HOME']), '.syndi'
Syndi.celluloid_log

$VERBOSITY = 0

# Parse options.
Slop.parse(:banner => "Usage: #$PROGRAM_NAME [options]", :help => true) do
  
  on :v, :version, 'Display version and exit.' do
    puts <<-EOV
Syndi #{Syndi::FULLVERSION}
[os: #{::RbConfig::CONFIG['host_os']}] [rb: #{::RbConfig::CONFIG['ruby_version']}] [arch: #{::RbConfig::CONFIG['arch']}]

http://syndibot.com
    EOV
    exit 0
  end
  
  on :d, :directory,  "Specify the application directory. (Default: #{Syndi.dir})", :argument => true do |dir|
    Syndi.dir = dir
  end

  command 'boot', {description: 'Start an instance of Syndi.', help: true} do

    on(:f, :foreground, 'Disable automatic daemonizing.')
    on(:V, :verbose,    'Increase verbosity of output (more uses, the more verbose).') { $VERBOSITY += 1 }

    run do |opts, _args|
      begin
        Syndi.boot opts
      rescue => e
        Syndi.log.fatal "Fatal runtime error: #{e}\n\t#{caller.join("\n\t")}"
      end
    end
  
  end

  command 'exec', {description: 'Execute an extension command.'} do
    on :r, :rehash, 'Rehash the shim index.'
    
    run do |opts, args|
      
      # process the data
      bindir = File.join Syndi.dir, 'bin'
      Dir.mkdir bindir unless Dir.exists? bindir
      command = args.shift unless args.empty?
     
      # if it's a rehash command, rehash shims
      if opts.rehash?
        
        puts 'Rehashing shims. . . .'
        extdir = File.join Syndi.dir, 'ext'
        
        if Dir.exists? extdir # check if the extension directory exists
          Dir.foreach(extdir) do |item| # iterate each item
            next if item =~ /\.|\.\./

            if Dir.exists? File.join(extdir, item, 'bin') # check for a bin/ subdir

              # iterate each executable
              Dir.foreach(File.join(extdir, item, 'bin')) do |executable|
                next if executable =~ /\.|\.\./
                
                new = File.join bindir, executable
                File.delete new if File.exists? new
                File.symlink(File.join(extdir, item, 'bin', executable), new)
              end

            end
          end
        end

        exit
      end
      
      if args.empty?
        system File.join(bindir, command)
      else
        system File.join(bindir, command), *args
      end
    
    end

  end

  command 'make', {description: 'Create various Syndi components.'} do
    run do |_opts, args|
      require 'syndi/cli/make'
      Syndi::CLI::Make.start args
    end
  end

end

# vim: set ts=4 sts=2 sw=2 et:
